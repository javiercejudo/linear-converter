{"version":3,"sources":["linear-converter.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length",1,"module","metricPrefixes","noneToExa","noneToPeta","noneToTera","noneToGiga","noneToMega","noneToKilo","noneToHecto","noneToDeca","noneToDeci","noneToCenti","noneToMilli","noneToMicro","noneToNano","noneToPico","noneToFemto","noneToAtto","temperature","celsiusToFahrenheit","celsiusToKelvin","celsiusToRankine","celsiusToDelisle","celsiusToNewton","celsiusToReaumur","celsiusToRomer","distance","metreToKilometre","metreToCentimetre","metreToMillimetre","metreToMile","metreToYard","metreToFoot","metreToInch","metreToNauticalMile","mass","kilogramToMetricTon","kilogramToGram","kilogramToMilligram","kilogramToMicrogram","kilogramToLongTon","kilogramToShortTon","kilogramToStone","kilogramToPound","kilogramToOunce","time","secondToNanosecond","secondToMicrosecond","secondToMillisecond","secondToMinute","secondToHour","secondToDay","secondToWeek","secondToMonth","secondToYear","secondToDecade","secondToCentury","secondToMillennium","electricCurrent","ampereToAbampere","amountOfSubstance","moleToPoundMole","speed","metresSecondToMilesHour","metresSecondToFeetSecond","metresSecondToKilometresHour","metresSecondToKnot","area","squareMetreToSquareKilometre","squareMetreToHectare","squareMetreToSquareMile","squareMetreToAcre","squareMetreToSquareYard","squareMetreToSquareFoot","squareMetreToSquareInch","volume","cubicMetreToMillilitre","cubicMetreToLitre","cubicMetreToCubicInch","cubicMetreToCubicFoot","cubicMetreToImperialFluidOunce","cubicMetreToImperialGill","cubicMetreToImperialPint","cubicMetreToImperialQuart","cubicMetreToImperialGallon","cubicMetreToUSFluidOunce","cubicMetreToUSGill","cubicMetreToUSPint","cubicMetreToUSQuart","cubicMetreToUSGallon",2,"PRESETS","../data/presets.json",3,"RescaleError","message","this","name","stack","setScaleError","newError","error","validScaleExample","setPresetError","validPresetExample","setPresetsError","validPresetsExample","api","prototype","Object","create","constructor","isValidScale","scale","Array","isArray","Number","isFinite","isValidPreset","preset","every","areValidPresets","presets","getLastError","resetLastError",4,"arguments","apply","dup",5,"rescaleUtil","normalise","x","rescale-util",6,7,8,"rescale","oldScale","newScale","scale-normalised","linear-converter","assertPreset","assertPresets","linearPresets","convert","invertPreset","slice","reverse","composePresets","reduce","previousPreset","currentPreset","getCoefficientA","getCoefficientB","linear-presets"],"mappings":"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","file":"linear-converter.min.js","sourcesContent":["require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\n  \"metricPrefixes\": {\n    \"noneToExa\": [[0, 1e18], [0, 1]],\n    \"noneToPeta\": [[0, 1e15], [0, 1]],\n    \"noneToTera\": [[0, 1e12], [0, 1]],\n    \"noneToGiga\": [[0, 1e9], [0, 1]],\n    \"noneToMega\": [[0, 1e6], [0, 1]],\n    \"noneToKilo\": [[0, 1e3], [0, 1]],\n    \"noneToHecto\": [[0, 100], [0, 1]],\n    \"noneToDeca\": [[0, 10], [0, 1]],\n    \"noneToDeci\": [[0, 1], [0, 10]],\n    \"noneToCenti\": [[0, 1], [0, 100]],\n    \"noneToMilli\": [[0, 1], [0, 1e3]],\n    \"noneToMicro\": [[0, 1], [0, 1e6]],\n    \"noneToNano\": [[0, 1], [0, 1e9]],\n    \"noneToPico\": [[0, 1], [0, 1e12]],\n    \"noneToFemto\": [[0, 1], [0, 1e15]],\n    \"noneToAtto\": [[0, 1], [0, 1e18]]\n  },\n  \"temperature\": {\n    \"celsiusToFahrenheit\": [[0, 100], [32, 212]],\n    \"celsiusToKelvin\": [[0, 100], [273.15, 373.15]],\n    \"celsiusToRankine\": [[0, 100], [491.67, 671.67]],\n    \"celsiusToDelisle\": [[0, 100], [150, 0]],\n    \"celsiusToNewton\": [[0, 100], [0, 33]],\n    \"celsiusToReaumur\": [[0, 100], [0, 80]],\n    \"celsiusToRomer\": [[0, 100], [7.5, 60]]\n  },\n  \"distance\": {\n    \"metreToKilometre\": [[0, 1e3], [0, 1]],\n    \"metreToCentimetre\": [[0, 1], [0, 100]],\n    \"metreToMillimetre\": [[0, 1], [0, 1e3]],\n    \"metreToMile\": [[0, 1609.344], [0, 1]],\n    \"metreToYard\": [[0, 0.9144], [0, 1]],\n    \"metreToFoot\": [[0, 0.3048], [0, 1]],\n    \"metreToInch\": [[0, 0.0254], [0, 1]],\n    \"metreToNauticalMile\": [[0, 1852], [0, 1]]\n  },\n  \"mass\": {\n    \"kilogramToMetricTon\": [[0, 1e3], [0, 1]],\n    \"kilogramToGram\": [[0, 1], [0, 1e3]],\n    \"kilogramToMilligram\": [[0, 1], [0, 1e6]],\n    \"kilogramToMicrogram\": [[0, 1], [0, 1e9]],\n    \"kilogramToLongTon\": [[0, 1016], [0, 1]],\n    \"kilogramToShortTon\": [[0, 907.18474], [0, 1]],\n    \"kilogramToStone\": [[0, 6.35029318], [0, 1]],\n    \"kilogramToPound\": [[0, 0.45359237], [0, 1]],\n    \"kilogramToOunce\": [[0, 0.02834952312], [0, 1]]\n  },\n  \"time\": {\n    \"secondToNanosecond\": [[0, 1], [0, 1e9]],\n    \"secondToMicrosecond\": [[0, 1], [0, 1e6]],\n    \"secondToMillisecond\": [[0, 1], [0, 1e3]],\n    \"secondToMinute\": [[0, 60], [0, 1]],\n    \"secondToHour\": [[0, 3600], [0, 1]],\n    \"secondToDay\": [[0, 86400], [0, 1]],\n    \"secondToWeek\": [[0, 604800], [0, 1]],\n    \"secondToMonth\": [[0, 2629746], [0, 1]],\n    \"secondToYear\": [[0, 31556952], [0, 1]],\n    \"secondToDecade\": [[0, 315569520], [0, 1]],\n    \"secondToCentury\": [[0, 3155695200], [0, 1]],\n    \"secondToMillennium\": [[0, 31556952000], [0, 1]]\n  },\n  \"electricCurrent\": {\n    \"ampereToAbampere\": [[0, 10], [0, 1]]\n  },\n  \"amountOfSubstance\": {\n    \"moleToPoundMole\": [[0, 453.59237], [0, 1]]\n  },\n  \"speed\": {\n    \"metresSecondToMilesHour\": [[0, 1], [0, 2.236936292054402]],\n    \"metresSecondToFeetSecond\": [[0, 1], [0, 3.280839895013123]],\n    \"metresSecondToKilometresHour\": [[0, 1], [0, 3.6]],\n    \"metresSecondToKnot\": [[0, 1], [0, 1.943844492440605]]\n  },\n  \"area\": {\n    \"squareMetreToSquareKilometre\": [[0, 1000000], [0, 1]],\n    \"squareMetreToHectare\": [[0, 10000], [0, 1]],\n    \"squareMetreToSquareMile\": [[0, 2589988.110336], [0, 1]],\n    \"squareMetreToAcre\": [[0, 4046.8564224], [0, 1]],\n    \"squareMetreToSquareYard\": [[0, 0.83612736], [0, 1]],\n    \"squareMetreToSquareFoot\": [[0, 0.09290304], [0, 1]],\n    \"squareMetreToSquareInch\": [[0, 0.00064516], [0, 1]]\n  },\n  \"volume\": {\n    \"cubicMetreToMillilitre\": [[0, 1], [0, 1e6]],\n    \"cubicMetreToLitre\": [[0, 1], [0, 1e3]],\n    \"cubicMetreToCubicInch\": [[0, 0.000016387064], [0, 1]],\n    \"cubicMetreToCubicFoot\": [[0, 0.028316846592000004], [0, 1]],\n    \"cubicMetreToImperialFluidOunce\": [[0, 0.0000284130625], [0, 1]],\n    \"cubicMetreToImperialGill\": [[0, 0.0001420653125], [0, 1]],\n    \"cubicMetreToImperialPint\": [[0, 0.00056826125], [0, 1]],\n    \"cubicMetreToImperialQuart\": [[0, 0.0011365225], [0, 1]],\n    \"cubicMetreToImperialGallon\": [[0, 0.00454609], [0, 1]],\n    \"cubicMetreToUSFluidOunce\": [[0, 0.000473176473], [0, 1]],\n    \"cubicMetreToUSGill\": [[0, 0.000473176473], [0, 1]],\n    \"cubicMetreToUSPint\": [[0, 0.000473176473], [0, 1]],\n    \"cubicMetreToUSQuart\": [[0, 0.000473176473], [0, 1]],\n    \"cubicMetreToUSGallon\": [[0, 0.000473176473], [0, 1]]\n  }\n}\n\n},{}],2:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nexports.PRESETS = require('../data/presets.json');\n\n},{\"../data/presets.json\":1}],3:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar error = '',\n    validScaleExample = 'Eg. [0, 1]',\n    validPresetExample = 'Eg. [[0, 100], [32, 212]]',\n    validPresetsExample = 'Eg. [[[0, 100], [32, 212]], [[0, 100], [-273.15, -173.15]]]',\n    api = {};\n\nfunction RescaleError(message) {\n  this.name = 'RescaleError';\n  this.message = message;\n  this.stack = (new Error()).stack;\n}\n\nRescaleError.prototype = Object.create(Error.prototype);\nRescaleError.prototype.constructor = RescaleError;\n\nexports.RescaleError = RescaleError;\n\nexports.isValidScale = api.isValidScale = function isValidScale(scale) {\n  if (!Array.isArray(scale) || scale.length !== 2) {\n    setScaleError('the scale must be an Array with two elements');\n\n    return false;\n  }\n\n  if (!Number.isFinite(scale[0]) || !Number.isFinite(scale[1])) {\n    setScaleError('the extremes must be finite numbers');\n\n    return false;\n  }\n\n  if (scale[0] === scale[1]) {\n    setScaleError('the extremes cannot be the same');\n\n    return false;\n  }\n\n  return true;\n};\n\nexports.isValidPreset = api.isValidPreset = function isValidPreset(preset) {\n  if (!Array.isArray(preset) || preset.length !== 2) {\n    setPresetError('a preset must be an Array with two scales');\n\n    return false;\n  }\n\n  return preset.every(function (scale) {\n    return api.isValidScale(scale);\n  });\n};\n\nexports.areValidPresets = function areValidPresets(presets) {\n  if (!Array.isArray(presets)) {\n    setPresetsError('presets must be an Array with presets');\n\n    return false;\n  }\n\n  return presets.every(function (preset) {\n    return api.isValidPreset(preset);\n  });\n};\n\nexports.getLastError = function getLastError() {\n  return error;\n};\n\nexports.resetLastError = function getLastError() {\n  error = '';\n};\n\nfunction setScaleError(newError) {\n  error = newError + '. ' + validScaleExample;\n}\n\nfunction setPresetError(newError) {\n  error = newError + '. ' + validPresetExample;\n}\n\nfunction setPresetsError(newError) {\n  error = newError + '. ' + validPresetsExample;\n}\n\n},{}],4:[function(require,module,exports){\narguments[4][3][0].apply(exports,arguments)\n},{\"dup\":3}],5:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar rescaleUtil = require('rescale-util');\nvar RescaleError = rescaleUtil.RescaleError;\n\nexports.normalise = function normalise(x, scale) {\n  if (typeof scale === 'undefined') {\n    return x;\n  }\n\n  if (!rescaleUtil.isValidScale(scale)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n\n  return (x - scale[0]) / (scale[1] - scale[0]);\n};\n\n},{\"rescale-util\":4}],6:[function(require,module,exports){\narguments[4][3][0].apply(exports,arguments)\n},{\"dup\":3}],7:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar rescaleUtil = require('rescale-util');\nvar RescaleError = rescaleUtil.RescaleError;\n\nexports.scale = function scaleNormalised(x, scale) {\n  if (typeof scale === 'undefined') {\n    return x;\n  }\n\n  if (!rescaleUtil.isValidScale(scale)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n\n  return scale[0] + x * (scale[1] - scale[0]);\n};\n\n},{\"rescale-util\":6}],8:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar normalise = require('normalise');\nvar scale = require('scale-normalised');\n\nexports.rescale = function rescale(x, oldScale, newScale) {\n  if (typeof newScale === 'undefined') {\n    return normalise.normalise(x, oldScale);\n  }\n\n  return scale.scale(normalise.normalise(x, oldScale), newScale);\n};\n\n},{\"normalise\":5,\"scale-normalised\":7}],\"linear-converter\":[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar rescale = require('rescale');\nvar rescaleUtil = require('rescale-util');\nvar linearPresets = require('linear-presets').PRESETS;\n\nvar RescaleError = rescaleUtil.RescaleError;\n\nexports.PRESETS = linearPresets;\n\n/**\n * Linearly converts x as described by a preset\n *\n * @param  {Number} x The number to be converted\n * @param  {Array} preset The preset that describes the conversion\n *\n * @return {Number} The converted x\n * @throws {RescaleError}\n */\nexports.convert = function convert(x, preset) {\n  if (typeof preset === 'undefined') {\n    return x;\n  }\n\n  assertPreset(preset);\n\n  return rescale.rescale(x, preset[0], preset[1]);\n};\n\n/**\n * Inverts a preset to change the direction of the conversion\n *\n * @param {Array} preset The preset to invert\n *\n * @return {Array} The inverted preset\n * @throws {RescaleError}\n */\nexports.invertPreset = function invertPreset(preset) {\n  assertPreset(preset);\n\n  return preset.slice(0).reverse();\n};\n\n/**\n * Composes two or more presets to create a single preset\n *\n * @param {Array} presets The array of the presets to compose\n *\n * @return {Array} The composed preset\n * @throws {RescaleError}\n */\nexports.composePresets = function composePresets(presets) {\n  assertPresets(presets);\n\n  return presets.reduce(function (previousPreset, currentPreset) {\n    return [\n      previousPreset[0],\n      [\n        rescale.rescale(previousPreset[1][0], currentPreset[0], currentPreset[1]),\n        rescale.rescale(previousPreset[1][1], currentPreset[0], currentPreset[1])\n      ]\n    ];\n  });\n};\n\n/**\n * Calculates the a coefficient in the f(x) = ax + b function that describes\n * the given preset.\n *\n * @param {Array} preset The preset for which to calculate its a coefficient\n *\n * @return {Number} The coefficient a\n * @throws {RescaleError}\n */\nexports.getCoefficientA = function getCoefficientA(preset) {\n  assertPreset(preset);\n\n  return (preset[1][1] - preset[1][0]) / (preset[0][1] - preset[0][0]);\n};\n\n/**\n * Calculates the b coefficient in the f(x) = ax + b function that describes\n * the given preset.\n *\n * @param {Array} preset The preset for which to calculate its b coefficient\n *\n * @return {Number} The coefficient b\n * @throws {RescaleError}\n */\nexports.getCoefficientB = function getCoefficientB(preset) {\n  assertPreset(preset);\n\n  return rescale.rescale(0, preset[0], preset[1]);\n};\n\n/**\n * Asserts a valid preset is given\n *\n * @param {Array} preset The preset to assert\n *\n * @throws {RescaleError}\n */\nfunction assertPreset(preset) {\n  if (!rescaleUtil.isValidPreset(preset)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n}\n\n/**\n * Asserts an array of valid preset is given\n *\n * @param {Array} presets The array of presets to assert\n *\n * @throws {RescaleError}\n */\nfunction assertPresets(presets) {\n  if (!rescaleUtil.areValidPresets(presets)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n}\n\n},{\"linear-presets\":2,\"rescale\":8,\"rescale-util\":3}]},{},[]);\n"],"sourceRoot":"/source/"}