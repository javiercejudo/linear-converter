{"version":3,"sources":["linear-converter.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length",1,"module","metricPrefixes","noneToYotta","noneToZetta","noneToExa","noneToPeta","noneToTera","noneToGiga","noneToMega","noneToKilo","noneToHecto","noneToDeca","noneToDeci","noneToCenti","noneToMilli","noneToMicro","noneToNano","noneToPico","noneToFemto","noneToAtto","noneToZepto","noneToYocto","temperature","celsiusToFahrenheit","celsiusToKelvin","celsiusToRankine","celsiusToDelisle","celsiusToNewton","celsiusToReaumur","celsiusToRomer","temperatureDifference","distance","metreToKilometre","metreToCentimetre","metreToMillimetre","metreToMile","metreToYard","metreToFoot","metreToInch","metreToNauticalMile","mass","kilogramToMetricTon","kilogramToGram","kilogramToMilligram","kilogramToMicrogram","kilogramToLongTon","kilogramToShortTon","kilogramToStone","kilogramToPound","kilogramToOunce","time","secondToNanosecond","secondToMicrosecond","secondToMillisecond","secondToMinute","secondToHour","secondToDay","secondToWeek","secondToMonth","secondToYear","secondToDecade","secondToCentury","secondToMillennium","electricCurrent","ampereToAbampere","amountOfSubstance","moleToPoundMole","velocity","metresSecondToMilesHour","metresSecondToFeetSecond","metresSecondToKilometresHour","metresSecondToKnot","area","squareMetreToSquareKilometre","squareMetreToHectare","squareMetreToSquareMile","squareMetreToAcre","squareMetreToSquareYard","squareMetreToSquareFoot","squareMetreToSquareInch","volume","cubicMetreToMillilitre","cubicMetreToLitre","cubicMetreToCubicInch","cubicMetreToCubicFoot","cubicMetreToImperialFluidOunce","cubicMetreToImperialGill","cubicMetreToImperialPint","cubicMetreToImperialQuart","cubicMetreToImperialGallon","cubicMetreToUSDram","cubicMetreToUSFluidOunce","cubicMetreToUSGill","cubicMetreToUSCup","cubicMetreToUSPint","cubicMetreToUSQuart","cubicMetreToUSGallon","luminousIntensity","candelaToCandlepower","candelaToHefnerkerze","angle","radianToTurn","radianToDegree","radianToGradian","digitalInformation","byteToBit","byteToKibibyte","byteToMebibyte","byteToGibibyte","byteToTebibyte","byteToPebibyte","byteToExbibyte","byteToZebibyte","byteToYobibyte",2,"PRESETS","../data/presets.json",3,"optionale","optioanlDependency","er",4,"decimal","load","isAvailable",5,"RescaleError","message","this","name","stack","setScaleError","newError","error","validScaleExample","setPresetError","validPresetExample","setPresetsError","validPresetsExample","initialError","api","prototype","Object","create","constructor","isValidScale","scale","Array","isArray","isFinite","isValidPreset","preset","every","areValidPresets","presets","getLastError","resetLastError",6,"normaliseDecimal","x","minus","div","normaliseNative","rescaleUtil","arbitraryPrecision","normalise","Number","rescale-arbitrary-precision","rescale-util",7,"scaleDecimal","times","plus","scaleNative",8,"rescaleDecimal","oldScale","newScale","rescaleNative","rescale","scale-normalised","linear-converter","compose2presets","presetA","presetB","map","getCoefficientANative","getCoefficientADecimal","assertPreset","assertPresets","convert","invertPreset","slice","reverse","composePresets","reduce","getCoefficientA","getCoefficientB","linear-presets"],"mappings":"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","file":"linear-converter.min.js","sourcesContent":["/**\n * linear-converter - Copyright 2015 Javier Cejudo <javier@javiercejudo.com> (http://www.javiercejudo.com)\n * @version v1.2.0-beta.1\n * @link https://github.com/javiercejudo/linear-converter#readme\n * @license MIT\n */\nrequire=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports={\n  \"metricPrefixes\": {\n    \"noneToYotta\": [[0, 1e24], [0, 1]],\n    \"noneToZetta\": [[0, 1e21], [0, 1]],\n    \"noneToExa\": [[0, 1e18], [0, 1]],\n    \"noneToPeta\": [[0, 1e15], [0, 1]],\n    \"noneToTera\": [[0, 1e12], [0, 1]],\n    \"noneToGiga\": [[0, 1e9], [0, 1]],\n    \"noneToMega\": [[0, 1e6], [0, 1]],\n    \"noneToKilo\": [[0, 1e3], [0, 1]],\n    \"noneToHecto\": [[0, 100], [0, 1]],\n    \"noneToDeca\": [[0, 10], [0, 1]],\n    \"noneToDeci\": [[0, 1], [0, 10]],\n    \"noneToCenti\": [[0, 1], [0, 100]],\n    \"noneToMilli\": [[0, 1], [0, 1e3]],\n    \"noneToMicro\": [[0, 1], [0, 1e6]],\n    \"noneToNano\": [[0, 1], [0, 1e9]],\n    \"noneToPico\": [[0, 1], [0, 1e12]],\n    \"noneToFemto\": [[0, 1], [0, 1e15]],\n    \"noneToAtto\": [[0, 1], [0, 1e18]],\n    \"noneToZepto\": [[0, 1], [0, 1e21]],\n    \"noneToYocto\": [[0, 1], [0, 1e24]]\n  },\n  \"temperature\": {\n    \"celsiusToFahrenheit\": [[0, 100], [32, 212]],\n    \"celsiusToKelvin\": [[0, 100], [273.15, 373.15]],\n    \"celsiusToRankine\": [[0, 100], [491.67, 671.67]],\n    \"celsiusToDelisle\": [[0, 100], [150, 0]],\n    \"celsiusToNewton\": [[0, 100], [0, 33]],\n    \"celsiusToReaumur\": [[0, 100], [0, 80]],\n    \"celsiusToRomer\": [[0, 100], [7.5, 60]]\n  },\n  \"temperatureDifference\": {\n    \"celsiusToFahrenheit\": [[0, 5], [0, 9]],\n    \"celsiusToKelvin\": [[0, 1], [0, 1]],\n    \"celsiusToRankine\": [[0, 5], [0, 9]],\n    \"celsiusToDelisle\": [[0, 2], [0, -3]],\n    \"celsiusToNewton\": [[0, 100], [0, 33]],\n    \"celsiusToReaumur\": [[0, 5], [0, 4]],\n    \"celsiusToRomer\": [[0, 40], [0, 21]]\n  },\n  \"distance\": {\n    \"metreToKilometre\": [[0, 1e3], [0, 1]],\n    \"metreToCentimetre\": [[0, 1], [0, 100]],\n    \"metreToMillimetre\": [[0, 1], [0, 1e3]],\n    \"metreToMile\": [[0, 1609.344], [0, 1]],\n    \"metreToYard\": [[0, 0.9144], [0, 1]],\n    \"metreToFoot\": [[0, 0.3048], [0, 1]],\n    \"metreToInch\": [[0, 0.0254], [0, 1]],\n    \"metreToNauticalMile\": [[0, 1852], [0, 1]]\n  },\n  \"mass\": {\n    \"kilogramToMetricTon\": [[0, 1e3], [0, 1]],\n    \"kilogramToGram\": [[0, 1], [0, 1e3]],\n    \"kilogramToMilligram\": [[0, 1], [0, 1e6]],\n    \"kilogramToMicrogram\": [[0, 1], [0, 1e9]],\n    \"kilogramToLongTon\": [[0, 1016], [0, 1]],\n    \"kilogramToShortTon\": [[0, 907.18474], [0, 1]],\n    \"kilogramToStone\": [[0, 6.35029318], [0, 1]],\n    \"kilogramToPound\": [[0, 0.45359237], [0, 1]],\n    \"kilogramToOunce\": [[0, 0.02834952312], [0, 1]]\n  },\n  \"time\": {\n    \"secondToNanosecond\": [[0, 1], [0, 1e9]],\n    \"secondToMicrosecond\": [[0, 1], [0, 1e6]],\n    \"secondToMillisecond\": [[0, 1], [0, 1e3]],\n    \"secondToMinute\": [[0, 60], [0, 1]],\n    \"secondToHour\": [[0, 3600], [0, 1]],\n    \"secondToDay\": [[0, 86400], [0, 1]],\n    \"secondToWeek\": [[0, 604800], [0, 1]],\n    \"secondToMonth\": [[0, 2629746], [0, 1]],\n    \"secondToYear\": [[0, 31556952], [0, 1]],\n    \"secondToDecade\": [[0, 315569520], [0, 1]],\n    \"secondToCentury\": [[0, 3155695200], [0, 1]],\n    \"secondToMillennium\": [[0, 31556952000], [0, 1]]\n  },\n  \"electricCurrent\": {\n    \"ampereToAbampere\": [[0, 10], [0, 1]]\n  },\n  \"amountOfSubstance\": {\n    \"moleToPoundMole\": [[0, 453.59237], [0, 1]]\n  },\n  \"velocity\": {\n    \"metresSecondToMilesHour\": [[0, 1], [0, 2.236936292054402]],\n    \"metresSecondToFeetSecond\": [[0, 1], [0, 3.280839895013123]],\n    \"metresSecondToKilometresHour\": [[0, 1], [0, 3.6]],\n    \"metresSecondToKnot\": [[0, 1], [0, 1.943844492440605]]\n  },\n  \"area\": {\n    \"squareMetreToSquareKilometre\": [[0, 1e6], [0, 1]],\n    \"squareMetreToHectare\": [[0, 1e4], [0, 1]],\n    \"squareMetreToSquareMile\": [[0, 2589988.110336], [0, 1]],\n    \"squareMetreToAcre\": [[0, 4046.8564224], [0, 1]],\n    \"squareMetreToSquareYard\": [[0, 0.83612736], [0, 1]],\n    \"squareMetreToSquareFoot\": [[0, 0.09290304], [0, 1]],\n    \"squareMetreToSquareInch\": [[0, 0.00064516], [0, 1]]\n  },\n  \"volume\": {\n    \"cubicMetreToMillilitre\": [[0, 1], [0, 1e6]],\n    \"cubicMetreToLitre\": [[0, 1], [0, 1e3]],\n    \"cubicMetreToCubicInch\": [[0, 0.000016387064], [0, 1]],\n    \"cubicMetreToCubicFoot\": [[0, 0.028316846592000004], [0, 1]],\n    \"cubicMetreToImperialFluidOunce\": [[0, 0.0000284130625], [0, 1]],\n    \"cubicMetreToImperialGill\": [[0, 0.0001420653125], [0, 1]],\n    \"cubicMetreToImperialPint\": [[0, 0.00056826125], [0, 1]],\n    \"cubicMetreToImperialQuart\": [[0, 0.0011365225], [0, 1]],\n    \"cubicMetreToImperialGallon\": [[0, 0.00454609], [0, 1]],\n    \"cubicMetreToUSDram\": [[0, 0.0000036966911953125], [0, 1]],\n    \"cubicMetreToUSFluidOunce\": [[0, 0.0000295735295625], [0, 1]],\n    \"cubicMetreToUSGill\": [[0, 0.00011829411825], [0, 1]],\n    \"cubicMetreToUSCup\": [[0, 0.0002365882365], [0, 1]],\n    \"cubicMetreToUSPint\": [[0, 0.000473176473], [0, 1]],\n    \"cubicMetreToUSQuart\": [[0, 0.000946352946], [0, 1]],\n    \"cubicMetreToUSGallon\": [[0, 0.003785411784], [0, 1]]\n  },\n  \"luminousIntensity\": {\n    \"candelaToCandlepower\": [[0, 0.981], [0, 1]],\n    \"candelaToHefnerkerze\": [[0, 0.920], [0, 1]]\n  },\n  \"angle\": {\n    \"radianToTurn\": [[0, 6.283185307179586], [0, 1]],\n    \"radianToDegree\": [[0, 6.283185307179586], [0, 360]],\n    \"radianToGradian\": [[0, 6.283185307179586], [0, 400]]\n  },\n  \"digitalInformation\": {\n    \"byteToBit\": [[0, 1], [0, 8]],\n    \"byteToKibibyte\": [[0, 1024], [0, 1]],\n    \"byteToMebibyte\": [[0, 1048576], [0, 1]],\n    \"byteToGibibyte\": [[0, 1073741824], [0, 1]],\n    \"byteToTebibyte\": [[0, 1099511627776], [0, 1]],\n    \"byteToPebibyte\": [[0, 1125899906842624], [0, 1]],\n    \"byteToExbibyte\": [[0, 1152921504606846976], [0, 1]],\n    \"byteToZebibyte\": [[0, 1180591620717411303424], [0, 1]],\n    \"byteToYobibyte\": [[0, 1208925819614629174706176], [0, 1]]\n  }\n}\n\n},{}],2:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nexports.PRESETS = require('../data/presets.json');\n\n},{\"../data/presets.json\":1}],3:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\n/**\n * Returns the package for the given name if found or undefined otherwise\n *\n * @param  {String} The name of the package to load\n *\n * @return {*}\n */\nexports.optionale = function optionale(optioanlDependency) {\n  try {\n    return require(optioanlDependency);\n  } catch (er) {\n    return;\n  }\n};\n\n},{}],4:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar optionale = require('optionale');\n\nvar decimal;\n\n/**\n * Returns arbitrary precision library if available or undefined otherwise\n *\n * @return {*}\n */\nexports.load = function load() {\n  decimal = optionale.optionale('big.js');\n\n  return decimal;\n};\n\n/**\n * Returns true if arbitrary precision is available and false otherwise\n *\n * @return {Boolean} Arbitrary precision availability\n */\nexports.isAvailable = function isAvailable() {\n  return typeof decimal !== 'undefined';\n};\n\n},{\"optionale\":3}],5:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar initialError = '',\n    error = initialError,\n    validScaleExample = 'Eg. [0, 1]',\n    validPresetExample = 'Eg. [[0, 100], [32, 212]]',\n    validPresetsExample = 'Eg. [[[0, 100], [32, 212]], [[0, 100], [-273.15, -173.15]]]',\n    api = {};\n\nfunction RescaleError(message) {\n  this.name = 'RescaleError';\n  this.message = message;\n  this.stack = (new Error()).stack;\n}\n\nRescaleError.prototype = Object.create(Error.prototype);\nRescaleError.prototype.constructor = RescaleError;\n\nexports.RescaleError = RescaleError;\n\nexports.isValidScale = api.isValidScale = function isValidScale(scale) {\n  if (!Array.isArray(scale) || scale.length !== 2) {\n    setScaleError('the scale must be an Array with two elements');\n\n    return false;\n  }\n\n  if (!isFinite(scale[0]) || !isFinite(scale[1]) || typeof scale[0] !== 'number' || typeof scale[1] !== 'number') {\n    setScaleError('the extremes must be finite numbers');\n\n    return false;\n  }\n\n  if (scale[0] === scale[1]) {\n    setScaleError('the extremes cannot be the same');\n\n    return false;\n  }\n\n  return true;\n};\n\nexports.isValidPreset = api.isValidPreset = function isValidPreset(preset) {\n  if (!Array.isArray(preset) || preset.length !== 2) {\n    setPresetError('a preset must be an Array with two scales');\n\n    return false;\n  }\n\n  return preset.every(function (scale) {\n    return api.isValidScale(scale);\n  });\n};\n\nexports.areValidPresets = function areValidPresets(presets) {\n  if (!Array.isArray(presets)) {\n    setPresetsError('presets must be an Array with presets');\n\n    return false;\n  }\n\n  return presets.every(function (preset) {\n    return api.isValidPreset(preset);\n  });\n};\n\nexports.getLastError = function getLastError() {\n  return error;\n};\n\nexports.resetLastError = function getLastError() {\n  error = initialError;\n};\n\nfunction setScaleError(newError) {\n  error = newError + '. ' + validScaleExample;\n}\n\nfunction setPresetError(newError) {\n  error = newError + '. ' + validPresetExample;\n}\n\nfunction setPresetsError(newError) {\n  error = newError + '. ' + validPresetsExample;\n}\n\n},{}],6:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar rescaleUtil = require('rescale-util');\nvar arbitraryPrecision = require('rescale-arbitrary-precision');\n\nvar RescaleError = rescaleUtil.RescaleError;\nvar decimal = arbitraryPrecision.load();\n\nexports.normalise = function normalise(x, scale) {\n  if (typeof scale === 'undefined') {\n    return x;\n  }\n\n  if (!rescaleUtil.isValidScale(scale)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n\n  if (arbitraryPrecision.isAvailable()) {\n    return Number(normaliseDecimal(x, scale));\n  }\n\n  return normaliseNative(x, scale);\n};\n\nfunction normaliseDecimal(x, scale) {\n  return decimal(x).minus(scale[0])\n    .div(decimal(scale[1]).minus(scale[0]));\n}\n\nfunction normaliseNative(x, scale) {\n  return (x - scale[0]) / (scale[1] - scale[0]);\n}\n\n},{\"rescale-arbitrary-precision\":4,\"rescale-util\":5}],7:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar rescaleUtil = require('rescale-util');\nvar arbitraryPrecision = require('rescale-arbitrary-precision');\n\nvar RescaleError = rescaleUtil.RescaleError;\nvar decimal = arbitraryPrecision.load();\n\nexports.scale = function scaleNormalised(x, scale) {\n  if (typeof scale === 'undefined') {\n    return x;\n  }\n\n  if (!rescaleUtil.isValidScale(scale)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n\n  if (arbitraryPrecision.isAvailable()) {\n    return Number(scaleDecimal(x, scale));\n  }\n\n  return scaleNative(x, scale);\n};\n\nfunction scaleDecimal(x, scale) {\n  return decimal(scale[1]).minus(scale[0]).times(x).plus(scale[0]);\n}\n\nfunction scaleNative(x, scale) {\n  return scale[0] + x * (scale[1] - scale[0]);\n}\n\n},{\"rescale-arbitrary-precision\":4,\"rescale-util\":5}],8:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar normalise = require('normalise');\nvar scale = require('scale-normalised');\nvar arbitraryPrecision = require('rescale-arbitrary-precision');\n\nvar decimal = arbitraryPrecision.load();\n\nexports.rescale = function rescale(x, oldScale, newScale) {\n  if (typeof newScale === 'undefined') {\n    return normalise.normalise(x, oldScale);\n  }\n\n  if (arbitraryPrecision.isAvailable()) {\n    return Number(rescaleDecimal(x, oldScale, newScale));\n  }\n\n  return rescaleNative(x, oldScale, newScale);\n};\n\nfunction rescaleDecimal(x, oldScale, newScale) {\n  return scaleDecimal(normaliseDecimal(x, oldScale), newScale);\n}\n\nfunction normaliseDecimal(x, scale) {\n  return decimal(x).minus(scale[0])\n    .div(decimal(scale[1]).minus(scale[0]));\n}\n\nfunction scaleDecimal(x, scale) {\n  return decimal(scale[1]).minus(scale[0]).times(x).plus(scale[0]);\n}\n\nfunction rescaleNative(x, oldScale, newScale) {\n  return scale.scale(normalise.normalise(x, oldScale), newScale);\n}\n\n},{\"normalise\":6,\"rescale-arbitrary-precision\":4,\"scale-normalised\":7}],\"linear-converter\":[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar rescale = require('rescale');\nvar rescaleUtil = require('rescale-util');\nvar arbitraryPrecision = require('rescale-arbitrary-precision');\n\nvar RescaleError = rescaleUtil.RescaleError;\nvar decimal = arbitraryPrecision.load();\n\n/**\n * @type {Object}\n */\nexports.PRESETS = require('linear-presets').PRESETS;\n\n/**\n * Linearly converts x as described by a preset\n *\n * @param  {Number} x The number to be converted\n * @param  {Array} preset The preset that describes the conversion\n *\n * @return {Number} The converted x\n * @throws {RescaleError}\n */\nexports.convert = function convert(x, preset) {\n  if (typeof preset === 'undefined') {\n    return x;\n  }\n\n  assertPreset(preset);\n\n  return rescale.rescale(x, preset[0], preset[1]);\n};\n\n/**\n * Inverts a preset to change the direction of the conversion\n *\n * @param {Array} preset The preset to invert\n *\n * @return {Array} The inverted preset\n * @throws {RescaleError}\n */\nexports.invertPreset = function invertPreset(preset) {\n  assertPreset(preset);\n\n  return preset.slice(0).reverse();\n};\n\n/**\n * Composes two or more presets to create a single preset\n *\n * @param {Array} presets The array of the presets to compose\n *\n * @return {Array} The composed preset\n * @throws {RescaleError}\n */\nexports.composePresets = function composePresets(presets) {\n  assertPresets(presets);\n\n  if (presets.length === 0) {\n    return presets;\n  }\n\n  return presets.reduce(compose2presets);\n};\n\n/**\n * Calculates the a coefficient in the f(x) = ax + b function that describes\n * the given preset.\n *\n * @param {Array} preset The preset for which to calculate its a coefficient\n *\n * @return {Number} The coefficient a\n * @throws {RescaleError}\n */\nexports.getCoefficientA = function getCoefficientA(preset) {\n  assertPreset(preset);\n\n  if (arbitraryPrecision.isAvailable()) {\n    return Number(getCoefficientADecimal(preset));\n  }\n\n  return getCoefficientANative(preset);\n};\n\n/**\n * Calculates the b coefficient in the f(x) = ax + b function that describes\n * the given preset.\n *\n * @param {Array} preset The preset for which to calculate its b coefficient\n *\n * @return {Number} The coefficient b\n * @throws {RescaleError}\n */\nexports.getCoefficientB = function getCoefficientB(preset) {\n  assertPreset(preset);\n\n  return rescale.rescale(0, preset[0], preset[1]);\n};\n\n/**\n * Composes two presets to create a single preset\n *\n * @param {Array} preset The first preset to compose\n * @param {Array} preset The second preset to compose\n *\n * @return {Array} The composed preset\n */\nfunction compose2presets(presetA, presetB) {\n  return [\n    presetA[0],\n    presetA[1].map(function(x) {\n      return rescale.rescale(x, presetB[0], presetB[1]);\n    })\n  ];\n}\n\n/**\n * Calculates the a coefficient in the f(x) = ax + b function that describes\n * the given preset using floating-point numbers.\n *\n * @param {Array} preset The preset for which to calculate its a coefficient\n *\n * @return {Number} The coefficient a\n */\nfunction getCoefficientANative(preset) {\n  return (preset[1][1] - preset[1][0]) / (preset[0][1] - preset[0][0]);\n}\n\n/**\n * Calculates the a coefficient in the f(x) = ax + b function that describes\n * the given preset using arbitrary precision.\n *\n * @param {Array} preset The preset for which to calculate its a coefficient\n *\n * @return {Big} The coefficient a\n */\nfunction getCoefficientADecimal(preset) {\n  return decimal(preset[1][1]).minus(preset[1][0])\n    .div(decimal(preset[0][1]).minus(preset[0][0]));\n}\n\n/**\n * Asserts a valid preset is given\n *\n * @param {Array} preset The preset to assert\n *\n * @throws {RescaleError}\n */\nfunction assertPreset(preset) {\n  if (!rescaleUtil.isValidPreset(preset)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n}\n\n/**\n * Asserts an array of valid preset is given\n *\n * @param {Array} presets The array of presets to assert\n *\n * @throws {RescaleError}\n */\nfunction assertPresets(presets) {\n  if (!rescaleUtil.areValidPresets(presets)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n}\n\n},{\"linear-presets\":2,\"rescale\":8,\"rescale-arbitrary-precision\":4,\"rescale-util\":5}]},{},[]);\n"],"sourceRoot":"/source/"}