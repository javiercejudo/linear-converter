{"version":3,"sources":["linear-converter.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","1","module","scaleToDecimalFactory","Decimal","scaleToDecimal","preset","map","linear-scale-to-decimal","2","toDecimalFactory","toDecimal","scale","to-decimal-arbitrary-precision","3","Object","freeze","normalise","x","scale0","minus","div","4","normaliseFactory","scaleFactory","rescale","oldScale","newScale","scale-normalised","5","times","toString","plus","6","linear-converter","rescaleFactory","presetToDecimalFactory","presetToDecimal","api","convert","conversion","invertConversion","slice","reverse","composeConversions","conversionA","conversionB","getCoefficientA","getCoefficientB","equivalentConversions","equals","linear-preset-to-decimal"],"mappings":"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","file":"linear-converter.min.js","sourcesContent":["/**\n * linear-converter - Copyright 2016 Javier Cejudo <javier@javiercejudo.com> (http://www.javiercejudo.com)\n * @version v7.3.0\n * @link https://github.com/javiercejudo/linear-converter#readme\n * @license MIT\n */\nrequire=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar scaleToDecimalFactory = require('linear-scale-to-decimal');\n\nmodule.exports = function factory(Decimal) {\n  var scaleToDecimal = scaleToDecimalFactory(Decimal);\n\n  return function presetToDecimal(preset) {\n    return preset.map(scaleToDecimal);\n  };\n};\n\n},{\"linear-scale-to-decimal\":2}],2:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar toDecimalFactory = require('to-decimal-arbitrary-precision');\n\nmodule.exports = function factory(Decimal) {\n  var toDecimal = toDecimalFactory(Decimal);\n\n  return function scaleToDecimal(scale) {\n    return scale.map(toDecimal);\n  };\n};\n\n},{\"to-decimal-arbitrary-precision\":6}],3:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar toDecimalFactory = require('to-decimal-arbitrary-precision');\n\nmodule.exports = function factory(Decimal) {\n  var toDecimal = toDecimalFactory(Decimal);\n\n  return Object.freeze({\n    normalise: function normalise(scale, x) {\n      var scale0 = toDecimal(scale[0]);\n\n      return toDecimal(x).minus(scale0)\n        .div(toDecimal(scale[1]).minus(scale0));\n    }\n  });\n};\n\n},{\"to-decimal-arbitrary-precision\":6}],4:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar normaliseFactory = require('normalise');\nvar scaleFactory = require('scale-normalised');\n\nmodule.exports = function factory(Decimal) {\n  var normalise = normaliseFactory(Decimal).normalise;\n  var scale = scaleFactory(Decimal).scale;\n\n  return Object.freeze({\n    rescale: function rescale(oldScale, newScale, x) {\n      return scale(newScale, normalise(oldScale, x));\n    }\n  });\n};\n\n},{\"normalise\":3,\"scale-normalised\":5}],5:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar toDecimalFactory = require('to-decimal-arbitrary-precision');\n\nmodule.exports = function factory(Decimal) {\n  var toDecimal = toDecimalFactory(Decimal);\n\n  return Object.freeze({\n    scale: function scaleNormalised(scale, x) {\n      var scale0 = toDecimal(scale[0]);\n\n      return toDecimal(scale[1]).minus(scale0)\n        .times(toDecimal(x.toString())).plus(scale0);\n    }\n  });\n};\n\n},{\"to-decimal-arbitrary-precision\":6}],6:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nmodule.exports = function factory(Decimal) {\n  return function toDecimal(n) {\n    return new Decimal(n.toString());\n  };\n};\n\n},{}],\"linear-converter\":[function(require,module,exports){\n'use strict';\n\nvar rescaleFactory = require('rescale');\nvar presetToDecimalFactory = require('linear-preset-to-decimal');\nvar scaleToDecimalFactory = require('linear-scale-to-decimal');\n\n/**\n * Returns the linear converter api based on the given adapter\n *\n * @param {Object} Decimal instance of decimal library\n * @return {Object} Linear converter API\n */\nmodule.exports = function factory(Decimal) {\n  var presetToDecimal = presetToDecimalFactory(Decimal);\n  var scaleToDecimal = scaleToDecimalFactory(Decimal);\n  var rescale = rescaleFactory(Decimal);\n  var api = {};\n\n  /**\n   * Linearly converts x as described by a conversion\n   *\n   * @param {Array} conversion The conversion\n   * @param {Number} x The number to be converted\n   * @return {Number} The converted x\n   */\n  api.convert = function convert(conversion, x) {\n    return rescale.rescale(conversion[0], conversion[1], x);\n  };\n\n  /**\n   * Inverts a conversion\n   *\n   * @param {Array} conversion The conversion to invert\n   * @return {Array} The inverted conversion\n   */\n  api.invertConversion = function invertConversion(conversion) {\n    return presetToDecimal(conversion.slice().reverse());\n  };\n\n  /**\n   * Composes two conversions to create a single conversion\n   *\n   * @param {Array} conversionA The first conversion to compose\n   * @param {Array} conversionB The second conversion to compose\n   * @return {Array} The composed conversion\n   */\n  api.composeConversions = function composeConversions(conversionA, conversionB) {\n    return [\n      scaleToDecimal(conversionA[0]),\n      [api.convert(conversionB, conversionA[1][0]), api.convert(conversionB, conversionA[1][1])]\n    ];\n  };\n\n  /**\n   * Calculates the a coefficient in the f(x) = ax + b function that describes\n   * the given conversion.\n   *\n   * @param {Array} conversion The conversion for which to calculate its a coefficient\n   * @return {Number} The coefficient a\n   */\n  api.getCoefficientA = function getCoefficientA(conversion) {\n    return api.convert(conversion, 1).minus(api.getCoefficientB(conversion));\n  };\n\n  /**\n   * Calculates the b coefficient in the f(x) = ax + b function that describes\n   * the given conversion.\n   *\n   * @param {Array} conversion The conversion for which to calculate its b coefficient\n   * @return {Number} The coefficient b\n   */\n  api.getCoefficientB = function getCoefficientB(conversion) {\n    return api.convert(conversion, 0);\n  };\n\n  /**\n   * Check equivalence of two conversions\n   *\n   * @param {Array} conversionA The first conversion to check for equivalence\n   * @param {Array} conversionB The second conversion to check for equivalence\n   * @return {Boolean} whether the conversions are equivalent or not\n   */\n  api.equivalentConversions = function equivalentConversions(conversionA, conversionB) {\n    return api.getCoefficientB(conversionA).equals(api.getCoefficientB(conversionB)) &&\n      api.convert(conversionA, 1).equals(api.convert(conversionB, 1));\n  };\n\n  return api;\n};\n\n},{\"linear-preset-to-decimal\":1,\"linear-scale-to-decimal\":2,\"rescale\":4}]},{},[]);\n"],"sourceRoot":"/source/"}