{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/linear-presets/data/presets.json","linear-converter.min.js","node_modules/linear-presets/src/linear-presets.js","node_modules/rescale-util/src/rescale-util.js","node_modules/rescale/node_modules/normalise/src/normalise.js","node_modules/rescale/node_modules/scale-normalised/src/scale.js","node_modules/rescale/src/rescale.js","src/convert.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length",1,"module","metricPrefixes","noneToExa","noneToPeta","noneToTera","noneToGiga","noneToMega","noneToKilo","noneToHecto","noneToDeca","noneToDeci","noneToCenti","noneToMilli","noneToMicro","noneToNano","noneToPico","noneToFemto","noneToAtto","temperature","celsiusToFahrenheit","celsiusToKelvin","celsiusToRankine","celsiusToDelisle","celsiusToNewton","celsiusToReaumur","celsiusToRomer","distance","metreToKilometre","metreToCentimetre","metreToMillimetre","metreToMile","metreToYard","metreToFoot","metreToInch","metreToNauticalMile","mass","kilogramToMetricTon","kilogramToGram","kilogramToMilligram","kilogramToMicrogram","kilogramToLongTon","kilogramToShortTon","kilogramToStone","kilogramToPound","kilogramToOunce","time","secondToNanosecond","secondToMicrosecond","secondToMillisecond","secondToMinute","secondToHour","secondToDay","secondToWeek","secondToMonth","secondToYear","secondToDecade","secondToCentury","secondToMillennium","electricCurrent","ampereToAbampere","amountOfSubstance","moleToPoundMole","speed","metresSecondToMilesHour","metresSecondToFeetSecond","metresSecondToKilometresHour","metresSecondToKnot","area","squareMetreToSquareKilometre","squareMetreToHectare","squareMetreToSquareMile","squareMetreToAcre","squareMetreToSquareYard","squareMetreToSquareFoot","squareMetreToSquareInch",2,"PRESETS","../data/presets.json",3,"RescaleError","message","this","name","stack","setScaleError","newError","error","validScaleExample","setPresetError","validPresetExample","setPresetsError","validPresetsExample","api","prototype","Object","create","constructor","isValidScale","scale","Array","isArray","Number","isFinite","isValidPreset","preset","every","areValidPresets","presets","getLastError","resetLastError",4,"arguments","apply","dup",5,"rescaleUtil","normalise","x","rescale-util",6,7,8,"rescale","oldScale","newScale","scale-normalised","linear-converter","assertPreset","assertPresets","linearPresets","convert","invertPreset","slice","reverse","composePresets","reduce","previousPreset","currentPreset","getCoefficientA","getCoefficientB","linear-presets"],"mappings":"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","file":"linear-converter.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports={\n  \"metricPrefixes\": {\n    \"noneToExa\": [[0, 1e+18], [0, 1]],\n    \"noneToPeta\": [[0, 1e+15], [0, 1]],\n    \"noneToTera\": [[0, 1e+12], [0, 1]],\n    \"noneToGiga\": [[0, 1e+9], [0, 1]],\n    \"noneToMega\": [[0, 1e+6], [0, 1]],\n    \"noneToKilo\": [[0, 1000], [0, 1]],\n    \"noneToHecto\": [[0, 100], [0, 1]],\n    \"noneToDeca\": [[0, 10], [0, 1]],\n    \"noneToDeci\": [[0, 1], [0, 10]],\n    \"noneToCenti\": [[0, 1], [0, 100]],\n    \"noneToMilli\": [[0, 1], [0, 1000]],\n    \"noneToMicro\": [[0, 1], [0, 1e+6]],\n    \"noneToNano\": [[0, 1], [0, 1e+9]],\n    \"noneToPico\": [[0, 1], [0, 1e+12]],\n    \"noneToFemto\": [[0, 1], [0, 1e+15]],\n    \"noneToAtto\": [[0, 1], [0, 1e+18]]\n  },\n  \"temperature\": {\n    \"celsiusToFahrenheit\": [[0, 100], [32, 212]],\n    \"celsiusToKelvin\": [[0, 100], [273.15, 373.15]],\n    \"celsiusToRankine\": [[0, 100], [491.67, 671.67]],\n    \"celsiusToDelisle\": [[0, 100], [150, 0]],\n    \"celsiusToNewton\": [[0, 100], [0, 33]],\n    \"celsiusToReaumur\": [[0, 100], [0, 80]],\n    \"celsiusToRomer\": [[0, 100], [7.5, 60]]\n  },\n  \"distance\": {\n    \"metreToKilometre\": [[0, 1000], [0, 1]],\n    \"metreToCentimetre\": [[0, 1], [0, 100]],\n    \"metreToMillimetre\": [[0, 1], [0, 1000]],\n    \"metreToMile\": [[0, 1609.344], [0, 1]],\n    \"metreToYard\": [[0, 0.9144], [0, 1]],\n    \"metreToFoot\": [[0, 0.3048], [0, 1]],\n    \"metreToInch\": [[0, 0.0254], [0, 1]],\n    \"metreToNauticalMile\": [[0, 1852], [0, 1]]\n  },\n  \"mass\": {\n    \"kilogramToMetricTon\": [[0, 1000], [0, 1]],\n    \"kilogramToGram\": [[0, 1], [0, 1000]],\n    \"kilogramToMilligram\": [[0, 1], [0, 1e+6]],\n    \"kilogramToMicrogram\": [[0, 1], [0, 1e+9]],\n    \"kilogramToLongTon\": [[0, 1016], [0, 1]],\n    \"kilogramToShortTon\": [[0, 907.18474], [0, 1]],\n    \"kilogramToStone\": [[0, 6.35029318], [0, 1]],\n    \"kilogramToPound\": [[0, 0.45359237], [0, 1]],\n    \"kilogramToOunce\": [[0, 0.02834952312], [0, 1]]\n  },\n  \"time\": {\n    \"secondToNanosecond\": [[0, 1], [0, 1e+9]],\n    \"secondToMicrosecond\": [[0, 1], [0, 1e+6]],\n    \"secondToMillisecond\": [[0, 1], [0, 1000]],\n    \"secondToMinute\": [[0, 60], [0, 1]],\n    \"secondToHour\": [[0, 3600], [0, 1]],\n    \"secondToDay\": [[0, 86400], [0, 1]],\n    \"secondToWeek\": [[0, 604800], [0, 1]],\n    \"secondToMonth\": [[0, 2629746], [0, 1]],\n    \"secondToYear\": [[0, 31556952], [0, 1]],\n    \"secondToDecade\": [[0, 315569520], [0, 1]],\n    \"secondToCentury\": [[0, 3155695200], [0, 1]],\n    \"secondToMillennium\": [[0, 31556952000], [0, 1]]\n  },\n  \"electricCurrent\": {\n    \"ampereToAbampere\": [[0, 10], [0, 1]]\n  },\n  \"amountOfSubstance\": {\n    \"moleToPoundMole\": [[0, 453.59237], [0, 1]]\n  },\n  \"speed\": {\n    \"metresSecondToMilesHour\": [[0, 1], [0, 2.236936292054402]],\n    \"metresSecondToFeetSecond\": [[0, 1], [0, 3.280839895013123]],\n    \"metresSecondToKilometresHour\": [[0, 1], [0, 3.6]],\n    \"metresSecondToKnot\": [[0, 1], [0, 1.943844492440605]]\n  },\n  \"area\": {\n    \"squareMetreToSquareKilometre\": [[0, 1000000], [0, 1]],\n    \"squareMetreToHectare\": [[0, 10000], [0, 1]],\n    \"squareMetreToSquareMile\": [[0, 2589988.110336], [0, 1]],\n    \"squareMetreToAcre\": [[0, 4046.8564224], [0, 1]],\n    \"squareMetreToSquareYard\": [[0, 0.83612736], [0, 1]],\n    \"squareMetreToSquareFoot\": [[0, 0.09290304], [0, 1]],\n    \"squareMetreToSquareInch\": [[0, 0.00064516], [0, 1]]\n  }\n}\n",null,"/*jshint node:true */\n\n'use strict';\n\nexports.PRESETS = require('../data/presets.json');\n","/*jshint node:true */\n\n'use strict';\n\nvar error = '',\n    validScaleExample = 'Eg. [0, 1]',\n    validPresetExample = 'Eg. [[0, 100], [32, 212]]',\n    validPresetsExample = 'Eg. [[[0, 100], [32, 212]], [[0, 100], [-273.15, -173.15]]]',\n    api = {};\n\nfunction RescaleError(message) {\n  this.name = 'RescaleError';\n  this.message = message;\n  this.stack = (new Error()).stack;\n}\n\nRescaleError.prototype = Object.create(Error.prototype);\nRescaleError.prototype.constructor = RescaleError;\n\nexports.RescaleError = RescaleError;\n\nexports.isValidScale = api.isValidScale = function isValidScale(scale) {\n  if (!Array.isArray(scale) || scale.length !== 2) {\n    setScaleError('the scale must be an Array with two elements');\n\n    return false;\n  }\n\n  if (!Number.isFinite(scale[0]) || !Number.isFinite(scale[1])) {\n    setScaleError('the extremes must be finite numbers');\n\n    return false;\n  }\n\n  if (scale[0] === scale[1]) {\n    setScaleError('the extremes cannot be the same');\n\n    return false;\n  }\n\n  return true;\n};\n\nexports.isValidPreset = api.isValidPreset = function isValidPreset(preset) {\n  if (!Array.isArray(preset) || preset.length !== 2) {\n    setPresetError('a preset must be an Array with two scales');\n\n    return false;\n  }\n\n  return preset.every(function (scale) {\n    return api.isValidScale(scale);\n  });\n};\n\nexports.areValidPresets = function areValidPresets(presets) {\n  if (!Array.isArray(presets)) {\n    setPresetsError('presets must be an Array with presets');\n\n    return false;\n  }\n\n  return presets.every(function (preset) {\n    return api.isValidPreset(preset);\n  });\n};\n\nexports.getLastError = function getLastError() {\n  return error;\n};\n\nexports.resetLastError = function getLastError() {\n  error = '';\n};\n\nfunction setScaleError(newError) {\n  error = newError + '. ' + validScaleExample;\n}\n\nfunction setPresetError(newError) {\n  error = newError + '. ' + validPresetExample;\n}\n\nfunction setPresetsError(newError) {\n  error = newError + '. ' + validPresetsExample;\n}\n","/*jshint node:true */\n\n'use strict';\n\nvar rescaleUtil = require('rescale-util');\nvar RescaleError = rescaleUtil.RescaleError;\n\nexports.normalise = function normalise(x, scale) {\n  if (typeof scale === 'undefined') {\n    return x;\n  }\n\n  if (!rescaleUtil.isValidScale(scale)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n\n  return (x - scale[0]) / (scale[1] - scale[0]);\n};\n","/*jshint node:true */\n\n'use strict';\n\nvar rescaleUtil = require('rescale-util');\nvar RescaleError = rescaleUtil.RescaleError;\n\nexports.scale = function scale(x, scale) {\n  if (typeof scale === 'undefined') {\n    return x;\n  }\n\n  if (!rescaleUtil.isValidScale(scale)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n\n  return scale[0] + x * (scale[1] - scale[0]);\n};\n","/*jshint node:true */\n\n'use strict';\n\nvar normalise = require('normalise');\nvar scale = require('scale-normalised');\n\nexports.rescale = function rescale(x, oldScale, newScale) {\n  if (typeof newScale === 'undefined') {\n    return normalise.normalise(x, oldScale);\n  }\n\n  return scale.scale(normalise.normalise(x, oldScale), newScale);\n};\n","/*jshint node:true */\n\n'use strict';\n\nvar rescale = require('rescale');\nvar rescaleUtil = require('rescale-util');\nvar linearPresets = require('linear-presets').PRESETS;\n\nvar RescaleError = rescaleUtil.RescaleError;\n\nexports.PRESETS = linearPresets;\n\n/**\n * Linearly converts x as described by a preset\n *\n * @param  {Number} x The number to be converted\n * @param  {Array} preset The preset that describes the conversion\n *\n * @return {Number} The converted x\n * @throws {RescaleError}\n */\nexports.convert = function convert(x, preset) {\n  if (typeof preset === 'undefined') {\n    return x;\n  }\n\n  assertPreset(preset);\n\n  return rescale.rescale(x, preset[0], preset[1]);\n};\n\n/**\n * Inverts a preset to change the direction of the conversion\n *\n * @param {Array} preset The preset to invert\n *\n * @return {Array} The inverted preset\n * @throws {RescaleError}\n */\nexports.invertPreset = function invertPreset(preset) {\n  assertPreset(preset);\n\n  return preset.slice(0).reverse();\n};\n\n/**\n * Composes two or more presets to create a single preset\n *\n * @param {Array} presets The array of the presets to compose\n *\n * @return {Array} The composed preset\n * @throws {RescaleError}\n */\nexports.composePresets = function composePresets(presets) {\n  assertPresets(presets);\n\n  return presets.reduce(function (previousPreset, currentPreset) {\n    return [\n      previousPreset[0],\n      [\n        rescale.rescale(previousPreset[1][0], currentPreset[0], currentPreset[1]),\n        rescale.rescale(previousPreset[1][1], currentPreset[0], currentPreset[1])\n      ]\n    ];\n  });\n};\n\n/**\n * Calculates the a coefficient in the f(x) = ax + b function that describes\n * the given preset.\n *\n * @param {Array} preset The preset for which to calculate its a coefficient\n *\n * @return {Number} The coefficient a\n * @throws {RescaleError}\n */\nexports.getCoefficientA = function getCoefficientA(preset) {\n  assertPreset(preset);\n\n  return (preset[1][1] - preset[1][0]) / (preset[0][1] - preset[0][0]);\n};\n\n/**\n * Calculates the b coefficient in the f(x) = ax + b function that describes\n * the given preset.\n *\n * @param {Array} preset The preset for which to calculate its b coefficient\n *\n * @return {Number} The coefficient b\n * @throws {RescaleError}\n */\nexports.getCoefficientB = function getCoefficientB(preset) {\n  assertPreset(preset);\n\n  return rescale.rescale(0, preset[0], preset[1]);\n};\n\n/**\n * Asserts a valid preset is given\n *\n * @param {Array} preset The preset to assert\n *\n * @throws {RescaleError}\n */\nfunction assertPreset(preset) {\n  if (!rescaleUtil.isValidPreset(preset)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n}\n\n/**\n * Asserts an array of valid preset is given\n *\n * @param {Array} presets The array of presets to assert\n *\n * @throws {RescaleError}\n */\nfunction assertPresets(presets) {\n  if (!rescaleUtil.areValidPresets(presets)) {\n    throw new RescaleError(rescaleUtil.getLastError());\n  }\n}\n"],"sourceRoot":"/source/"}