{"version":3,"sources":["linear-converter.min.js","linear-converter.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length",1,"module","Decimal","api","normalise","scale","x","scale0","toString","minus","div",2,"normaliseFactory","scaleFactory","rescale","oldScale","newScale","scale-normalised",3,"times","plus",4,"unitScale","unit-scale",5,"linear-converter","rescaleFactory","unitPreset","convert","conversion","invertConversion","composeConversions","slice","reverse","conversionA","conversionB","getCoefficientA","getCoefficientB","equivalentConversions","every","coefficient","equals","unit-preset"],"mappings":"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","file":"linear-converter.min.js","sourceRoot":"/source/","sourcesContent":["/**\n * linear-converter - Copyright 2015 Javier Cejudo <javier@javiercejudo.com> (http://www.javiercejudo.com)\n * @version v7.0.2\n * @link https://github.com/javiercejudo/linear-converter#readme\n * @license MIT\n */\nrequire=function n(e,r,t){function i(u,c){if(!r[u]){if(!e[u]){var s=\"function\"==typeof require&&require;if(!c&&s)return s(u,!0);if(o)return o(u,!0);var f=new Error(\"Cannot find module '\"+u+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var a=r[u]={exports:{}};e[u][0].call(a.exports,function(n){var r=e[u][1][n];return i(r?r:n)},a,a.exports,n,e,r,t)}return r[u].exports}for(var o=\"function\"==typeof require&&require,u=0;u<t.length;u++)i(t[u]);return i}({1:[function(n,e,r){\"use strict\";e.exports=function(n){var e={};return e.normalise=function(e,r){var t=new n(e[0].toString());return new n(r.toString()).minus(t).div(new n(e[1].toString()).minus(t))},e}},{}],2:[function(n,e,r){\"use strict\";var t=n(\"normalise\"),i=n(\"scale-normalised\");e.exports=function(n){var e=t(n).normalise,r=i(n).scale,o={};return o.rescale=function(n,t,i){return r(t,e(n,i))},o}},{normalise:1,\"scale-normalised\":3}],3:[function(n,e,r){\"use strict\";e.exports=function(n){var e={};return e.scale=function(e,r){var t=new n(e[0].toString());return new n(e[1].toString()).minus(t).times(new n(r.toString())).plus(t)},e}},{}],4:[function(n,e,r){\"use strict\";var t=n(\"unit-scale\");e.exports=[t,t]},{\"unit-scale\":5}],5:[function(n,e,r){\"use strict\";e.exports=[0,1]},{}],\"linear-converter\":[function(n,e,r){\"use strict\";var t=n(\"rescale\"),i=n(\"unit-preset\");e.exports=function(n){var e=t(n),r={};return r.convert=function(n,r){return e.rescale(n[0],n[1],r)},r.invertConversion=function(n){return r.composeConversions(n.slice().reverse(),i)},r.composeConversions=function(n,e){return[[r.convert(i,n[0][0]),r.convert(i,n[0][1])],[r.convert(e,n[1][0]),r.convert(e,n[1][1])]]},r.getCoefficientA=function(n){return r.convert(n,1).minus(r.getCoefficientB(n))},r.getCoefficientB=function(n){return r.convert(n,0)},r.equivalentConversions=function(n,e){return[r.getCoefficientB,r.getCoefficientA].every(function(r){return r(n).equals(r(e))})},r}},{rescale:2,\"unit-preset\":4}]},{},[]);","/**\n * linear-converter - Copyright 2015 Javier Cejudo <javier@javiercejudo.com> (http://www.javiercejudo.com)\n * @version v7.0.2\n * @link https://github.com/javiercejudo/linear-converter#readme\n * @license MIT\n */\nrequire=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nmodule.exports = function factory(Decimal) {\n  var api = {};\n\n  api.normalise = function normalise(scale, x) {\n    var scale0 = new Decimal(scale[0].toString());\n\n    return new Decimal(x.toString()).minus(scale0)\n      .div(new Decimal(scale[1].toString()).minus(scale0));\n  };\n\n  return api;\n};\n\n},{}],2:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar normaliseFactory = require('normalise');\nvar scaleFactory = require('scale-normalised');\n\nmodule.exports = function factory(Decimal) {\n  var normalise = normaliseFactory(Decimal).normalise;\n  var scale = scaleFactory(Decimal).scale;\n  var api = {};\n\n  api.rescale = function rescale(oldScale, newScale, x) {\n    return scale(newScale, normalise(oldScale, x));\n  };\n\n  return api;\n};\n\n},{\"normalise\":1,\"scale-normalised\":3}],3:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nmodule.exports = function factory(Decimal) {\n  var api = {};\n\n  api.scale = function scaleNormalised(scale, x) {\n    var scale0 = new Decimal(scale[0].toString());\n\n    return new Decimal(scale[1].toString()).minus(scale0)\n      .times(new Decimal(x.toString())).plus(scale0);\n  };\n\n  return api;\n};\n\n},{}],4:[function(require,module,exports){\n/* jshint node:true */\n\n'use strict';\n\nvar unitScale = require('unit-scale');\n\nmodule.exports = [unitScale, unitScale];\n\n},{\"unit-scale\":5}],5:[function(require,module,exports){\n/* jshint node:true */\n\n'use strict';\n\nmodule.exports = [0, 1];\n\n},{}],\"linear-converter\":[function(require,module,exports){\n'use strict';\n\nvar rescaleFactory = require('rescale');\nvar unitPreset = require('unit-preset');\n\n/**\n * Returns the linear converter api based on the given adapter\n *\n * @param {Object} Decimal instance of decimal library\n * @return {Object} Linear converter API\n */\nmodule.exports = function factory(Decimal) {\n  var rescale = rescaleFactory(Decimal);\n  var api = {};\n\n  /**\n   * Linearly converts x as described by a conversion\n   *\n   * @param {Array} conversion The conversion\n   * @param {Number} x The number to be converted\n   * @return {Number} The converted x\n   */\n  api.convert = function convert(conversion, x) {\n    return rescale.rescale(conversion[0], conversion[1], x);\n  };\n\n  /**\n   * Inverts a conversion\n   *\n   * @param {Array} conversion The conversion to invert\n   * @return {Array} The inverted conversion\n   */\n  api.invertConversion = function invertConversion(conversion) {\n    return api.composeConversions(conversion.slice().reverse(), unitPreset);\n  };\n\n  /**\n   * Composes two conversions to create a single conversion\n   *\n   * @param {Array} conversionA The first conversion to compose\n   * @param {Array} conversionB The second conversion to compose\n   * @return {Array} The composed conversion\n   */\n  api.composeConversions = function composeConversions(conversionA, conversionB) {\n    return [\n      [api.convert(unitPreset, conversionA[0][0]), api.convert(unitPreset, conversionA[0][1])],\n      [api.convert(conversionB, conversionA[1][0]), api.convert(conversionB, conversionA[1][1])]\n    ];\n  };\n\n  /**\n   * Calculates the a coefficient in the f(x) = ax + b function that describes\n   * the given conversion.\n   *\n   * @param {Array} conversion The conversion for which to calculate its a coefficient\n   * @return {Number} The coefficient a\n   */\n  api.getCoefficientA = function getCoefficientA(conversion) {\n    return api.convert(conversion, 1).minus(api.getCoefficientB(conversion));\n  };\n\n  /**\n   * Calculates the b coefficient in the f(x) = ax + b function that describes\n   * the given conversion.\n   *\n   * @param {Array} conversion The conversion for which to calculate its b coefficient\n   * @return {Number} The coefficient b\n   */\n  api.getCoefficientB = function getCoefficientB(conversion) {\n    return api.convert(conversion, 0);\n  };\n\n  /**\n   * Check equivalence of two conversions\n   *\n   * @param {Array} conversionA The first conversion to check for equivalence\n   * @param {Array} conversionB The second conversion to check for equivalence\n   * @return {Boolean} whether the conversions are equivalent or not\n   */\n  api.equivalentConversions = function equivalentConversions(conversionA, conversionB) {\n    return [api.getCoefficientB, api.getCoefficientA].every(function(coefficient) {\n      return coefficient(conversionA).equals(coefficient(conversionB));\n    });\n  };\n\n  return api;\n};\n\n},{\"rescale\":2,\"unit-preset\":4}]},{},[]);\n"]}