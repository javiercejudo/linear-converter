{"version":3,"sources":["linear-converter.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length",1,"module","b","kind",2,"isUndefined","value","undefined",3,"Decimal","api","normalise","x","scale","xDecimal","toString","scale0","minus","div","lodash.isundefined",4,"times","plus",5,"normaliseFactory","scaleFactory","rescale","oldScale","newScale","scale-normalised","linear-converter","rescaleFactory","twoOfAKind","presetEquivalenceRequisites","getCoefficientA","getCoefficientB","wrapPresetEquivalenceRequisite","presetEquivalenceRequisite","preset","convert","invertPreset","slice","reverse","composePresets","presetA","presetB","map","equivalentPresets","every","olsen"],"mappings":"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","file":"linear-converter.min.js","sourcesContent":["/**\n * linear-converter - Copyright 2015 Javier Cejudo <javier@javiercejudo.com> (http://www.javiercejudo.com)\n * @version v4.0.0\n * @link https://github.com/javiercejudo/linear-converter#readme\n * @license MIT\n */\nrequire=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\n/**\n * Returns a two of a kind check\n *\n * @param {*} a\n * @param {*} b\n *\n * @return {Function} [description]\n */\nmodule.exports = function olsen(a, b) {\n  /**\n   * Two of a kind check\n   *\n   * @param {Function} function to compare against\n   *\n   * @return {Boolean}\n   */\n  return function check(kind) {\n    return kind(a) === kind(b);\n  };\n};\n\n},{}],2:[function(require,module,exports){\n/**\n * lodash 3.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nmodule.exports = isUndefined;\n\n},{}],3:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar isUndefined = require('lodash.isundefined');\n\nmodule.exports = function factory(Decimal) {\n  var api = {};\n\n  api.normalise = function normalise(x, scale) {\n    var xDecimal = new Decimal(x.toString());\n\n    if (isUndefined(scale)) {\n      return xDecimal;\n    }\n\n    var scale0 = new Decimal(scale[0].toString());\n\n    return xDecimal.minus(scale0)\n      .div(new Decimal(scale[1].toString()).minus(scale0));\n  };\n\n  return api;\n};\n\n},{\"lodash.isundefined\":2}],4:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar isUndefined = require('lodash.isundefined');\n\nmodule.exports = function factory(Decimal) {\n  var api = {};\n\n  api.scale = function scaleNormalised(x, scale) {\n    if (isUndefined(scale)) {\n      return x;\n    }\n\n    var scale0 = new Decimal(scale[0].toString());\n\n    return new Decimal(scale[1].toString()).minus(scale0)\n      .times(new Decimal(x.toString())).plus(scale0);\n  };\n\n  return api;\n}\n\n},{\"lodash.isundefined\":2}],5:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar isUndefined = require('lodash.isundefined');\nvar normaliseFactory = require('normalise');\nvar scaleFactory = require('scale-normalised');\n\nmodule.exports = function factory(Decimal) {\n  var normalise = normaliseFactory(Decimal).normalise;\n  var scale = scaleFactory(Decimal).scale;\n  var api = {};\n\n  api.rescale = function rescale(x, oldScale, newScale) {\n    if (isUndefined(newScale)) {\n      return normalise(x, oldScale);\n    }\n\n    return scale(normalise(x, oldScale), newScale);\n  };\n\n  return api;\n};\n\n},{\"lodash.isundefined\":2,\"normalise\":3,\"scale-normalised\":4}],\"linear-converter\":[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar rescaleFactory = require('rescale');\nvar twoOfAKind = require('olsen');\n\n/**\n * Returns the linear converter api based on the given adapter\n *\n * @param {Object} Decimal instance of decimal library\n *\n * @return {Object} Linear converter API\n */\nmodule.exports = function factory(Decimal) {\n  var rescale = rescaleFactory(Decimal);\n  var api = {};\n\n  /**\n   * Linearly converts x as described by a preset\n   *\n   * @param {Number} x The number to be converted\n   * @param {Array} preset The preset that describes the conversion\n   *\n   * @return {Number} The converted x\n   */\n  api.convert = function convert(x, preset) {\n    return rescale.rescale(x, preset[0], preset[1]);\n  };\n\n  /**\n   * Inverts a preset to change the direction of the conversion\n   *\n   * @param {Array} preset The preset to invert\n   *\n   * @return {Array} The inverted preset\n   */\n  api.invertPreset = function invertPreset(preset) {\n    return preset.slice().reverse();\n  };\n\n  /**\n   * Composes two presets to create a single preset\n   *\n   * @param {Array} presetA The first preset to compose\n   * @param {Array} presetB The second preset to compose\n   *\n   * @return {Array} The composed preset\n   */\n  api.composePresets = function composePresets(presetA, presetB) {\n    return [\n      presetA[0].map(function(x) {\n        return rescale.rescale(x);\n      }),\n      presetA[1].map(function(x) {\n        return rescale.rescale(x, presetB[0], presetB[1]);\n      })\n    ];\n  };\n\n  /**\n   * Calculates the a coefficient in the f(x) = ax + b function that describes\n   * the given preset.\n   *\n   * @param {Array} preset The preset for which to calculate its a coefficient\n   *\n   * @return {Number} The coefficient a\n   */\n  api.getCoefficientA = function getCoefficientA(preset) {\n    return new Decimal(preset[1][1].toString()).minus(new Decimal(preset[1][0].toString()))\n      .div(new Decimal(preset[0][1].toString()).minus(new Decimal(preset[0][0].toString())));\n  };\n\n  /**\n   * Calculates the b coefficient in the f(x) = ax + b function that describes\n   * the given preset.\n   *\n   * @param {Array} preset The preset for which to calculate its b coefficient\n   *\n   * @return {Number} The coefficient b\n   */\n  api.getCoefficientB = function getCoefficientB(preset) {\n    return rescale.rescale(0, preset[0], preset[1]);\n  };\n\n  /**\n   * Check equivalence of two presets\n   *\n   * @param {Array} presetA The first preset to check for equivalence\n   * @param {Array} presetB The second preset to check for equivalence\n   *\n   * @return {Boolean} whether the presets are equivalent or not\n   */\n  api.equivalentPresets = function equivalentPresets(presetA, presetB) {\n    return presetEquivalenceRequisites().map(wrapPresetEquivalenceRequisite)\n      .every(twoOfAKind(presetA, presetB));\n  };\n\n  /**\n   * Returns an array of api functions that determine equivalence\n   *\n   * @return {Array}\n   */\n  function presetEquivalenceRequisites() {\n    return [\n      api.getCoefficientA,\n      api.getCoefficientB\n    ];\n  }\n\n  /**\n   * Wraps a preset equivalence requisite to return a stringified version\n   *\n   * @param {Function} presetEquivalenceRequisite [description]\n   *\n   * @return {Function}\n   */\n  function wrapPresetEquivalenceRequisite(presetEquivalenceRequisite) {\n    return function(preset) {\n      return presetEquivalenceRequisite(preset).toString();\n    };\n  }\n\n  return api;\n};\n\n},{\"olsen\":1,\"rescale\":5}]},{},[]);\n"],"sourceRoot":"/source/"}