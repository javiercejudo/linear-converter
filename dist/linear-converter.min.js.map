{"version":3,"sources":["linear-converter.min.js","linear-converter.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length",1,"module","Decimal","api","normalise","scale","x","scale0","toString","minus","div",2,"times","plus",3,"normaliseFactory","scaleFactory","rescale","oldScale","newScale","scale-normalised",4,5,"unitScale","unit-scale","linear-converter","rescaleFactory","unitPreset","convert","preset","invertPreset","composePresets","slice","reverse","presetA","presetB","getCoefficientA","getCoefficientB","equivalentPresets","every","coefficient","equals","unit-preset"],"mappings":"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","file":"linear-converter.min.js","sourcesContent":["/**\n * linear-converter - Copyright 2015 Javier Cejudo <javier@javiercejudo.com> (http://www.javiercejudo.com)\n * @version v6.0.0\n * @link https://github.com/javiercejudo/linear-converter#readme\n * @license MIT\n */\nrequire=function e(r,n,t){function i(u,c){if(!n[u]){if(!r[u]){var s=\"function\"==typeof require&&require;if(!c&&s)return s(u,!0);if(o)return o(u,!0);var f=new Error(\"Cannot find module '\"+u+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var a=n[u]={exports:{}};r[u][0].call(a.exports,function(e){var n=r[u][1][e];return i(n?n:e)},a,a.exports,e,r,n,t)}return n[u].exports}for(var o=\"function\"==typeof require&&require,u=0;u<t.length;u++)i(t[u]);return i}({1:[function(e,r,n){\"use strict\";r.exports=function(e){var r={};return r.normalise=function(r,n){var t=new e(r[0].toString());return new e(n.toString()).minus(t).div(new e(r[1].toString()).minus(t))},r}},{}],2:[function(e,r,n){\"use strict\";r.exports=function(e){var r={};return r.scale=function(r,n){var t=new e(r[0].toString());return new e(r[1].toString()).minus(t).times(new e(n.toString())).plus(t)},r}},{}],3:[function(e,r,n){\"use strict\";var t=e(\"normalise\"),i=e(\"scale-normalised\");r.exports=function(e){var r=t(e).normalise,n=i(e).scale,o={};return o.rescale=function(e,t,i){return n(t,r(e,i))},o}},{normalise:1,\"scale-normalised\":2}],4:[function(e,r,n){\"use strict\";r.exports=[0,1]},{}],5:[function(e,r,n){\"use strict\";var t=e(\"unit-scale\");r.exports=[t,t]},{\"unit-scale\":4}],\"linear-converter\":[function(e,r,n){\"use strict\";var t=e(\"rescale\"),i=e(\"unit-preset\");r.exports=function(e){var r=t(e),n={};return n.convert=function(e,n){return r.rescale(e[0],e[1],n)},n.invertPreset=function(e){return n.composePresets(e.slice().reverse(),i)},n.composePresets=function(e,r){return[[n.convert(i,e[0][0]),n.convert(i,e[0][1])],[n.convert(r,e[1][0]),n.convert(r,e[1][1])]]},n.getCoefficientA=function(e){return n.convert(e,1).minus(n.getCoefficientB(e))},n.getCoefficientB=function(e){return n.convert(e,0)},n.equivalentPresets=function(e,r){return[n.getCoefficientB,n.getCoefficientA].every(function(n){return n(e).equals(n(r))})},n}},{rescale:3,\"unit-preset\":5}]},{},[]);","/**\n * linear-converter - Copyright 2015 Javier Cejudo <javier@javiercejudo.com> (http://www.javiercejudo.com)\n * @version v6.0.0\n * @link https://github.com/javiercejudo/linear-converter#readme\n * @license MIT\n */\nrequire=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nmodule.exports = function factory(Decimal) {\n  var api = {};\n\n  api.normalise = function normalise(scale, x) {\n    var scale0 = new Decimal(scale[0].toString());\n\n    return new Decimal(x.toString()).minus(scale0)\n      .div(new Decimal(scale[1].toString()).minus(scale0));\n  };\n\n  return api;\n};\n\n},{}],2:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nmodule.exports = function factory(Decimal) {\n  var api = {};\n\n  api.scale = function scaleNormalised(scale, x) {\n    var scale0 = new Decimal(scale[0].toString());\n\n    return new Decimal(scale[1].toString()).minus(scale0)\n      .times(new Decimal(x.toString())).plus(scale0);\n  };\n\n  return api;\n};\n\n},{}],3:[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar normaliseFactory = require('normalise');\nvar scaleFactory = require('scale-normalised');\n\nmodule.exports = function factory(Decimal) {\n  var normalise = normaliseFactory(Decimal).normalise;\n  var scale = scaleFactory(Decimal).scale;\n  var api = {};\n\n  api.rescale = function rescale(oldScale, newScale, x) {\n    return scale(newScale, normalise(oldScale, x));\n  };\n\n  return api;\n};\n\n},{\"normalise\":1,\"scale-normalised\":2}],4:[function(require,module,exports){\n/* jshint node:true */\n\n'use strict';\n\nmodule.exports = [0, 1];\n\n},{}],5:[function(require,module,exports){\n/* jshint node:true */\n\n'use strict';\n\nvar unitScale = require('unit-scale');\n\nmodule.exports = [unitScale, unitScale];\n\n},{\"unit-scale\":4}],\"linear-converter\":[function(require,module,exports){\n/*jshint node:true */\n\n'use strict';\n\nvar rescaleFactory = require('rescale');\nvar unitPreset = require('unit-preset');\n\n/**\n * Returns the linear converter api based on the given adapter\n *\n * @param {Object} Decimal instance of decimal library\n * @return {Object} Linear converter API\n */\nmodule.exports = function factory(Decimal) {\n  var rescale = rescaleFactory(Decimal);\n  var api = {};\n\n  /**\n   * Linearly converts x as described by a preset\n   *\n   * @param {Array} preset The preset that describes the conversion\n   * @param {Number} x The number to be converted\n   * @return {Number} The converted x\n   */\n  api.convert = function convert(preset, x) {\n    return rescale.rescale(preset[0], preset[1], x);\n  };\n\n  /**\n   * Inverts a preset to change the direction of the conversion\n   *\n   * @param {Array} preset The preset to invert\n   * @return {Array} The inverted preset\n   */\n  api.invertPreset = function invertPreset(preset) {\n    return api.composePresets(preset.slice().reverse(), unitPreset);\n  };\n\n  /**\n   * Composes two presets to create a single preset\n   *\n   * @param {Array} presetA The first preset to compose\n   * @param {Array} presetB The second preset to compose\n   * @return {Array} The composed preset\n   */\n  api.composePresets = function composePresets(presetA, presetB) {\n    return [\n      [api.convert(unitPreset, presetA[0][0]), api.convert(unitPreset, presetA[0][1])],\n      [api.convert(presetB, presetA[1][0]), api.convert(presetB, presetA[1][1])]\n    ];\n  };\n\n  /**\n   * Calculates the a coefficient in the f(x) = ax + b function that describes\n   * the given preset.\n   *\n   * @param {Array} preset The preset for which to calculate its a coefficient\n   * @return {Number} The coefficient a\n   */\n  api.getCoefficientA = function getCoefficientA(preset) {\n    return api.convert(preset, 1).minus(api.getCoefficientB(preset));\n  };\n\n  /**\n   * Calculates the b coefficient in the f(x) = ax + b function that describes\n   * the given preset.\n   *\n   * @param {Array} preset The preset for which to calculate its b coefficient\n   * @return {Number} The coefficient b\n   */\n  api.getCoefficientB = function getCoefficientB(preset) {\n    return api.convert(preset, 0);\n  };\n\n  /**\n   * Check equivalence of two presets\n   *\n   * @param {Array} presetA The first preset to check for equivalence\n   * @param {Array} presetB The second preset to check for equivalence\n   * @return {Boolean} whether the presets are equivalent or not\n   */\n  api.equivalentPresets = function equivalentPresets(presetA, presetB) {\n    return [api.getCoefficientB, api.getCoefficientA].every(function(coefficient) {\n      return coefficient(presetA).equals(coefficient(presetB));\n    });\n  };\n\n  return api;\n};\n\n},{\"rescale\":3,\"unit-preset\":5}]},{},[]);\n"],"sourceRoot":"/source/"}